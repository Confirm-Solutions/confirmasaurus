name: Test

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths-ignore:
      - "research/**"
      - "**.ipynb"
      - "**.md"
  push:
    branches:
      - main
    paths-ignore:
      - "research/**"
      - "**.ipynb"
      - "**.md"
jobs:
  lint:
    if: github.event.pull_request.draft == false
    timeout-minutes: 15
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Install pre-commit
        run: pipx install pre-commit

      - name: set PY
        run: echo "PY=$(python -VV | sha256sum | cut -d' ' -f1)" >> $GITHUB_ENV
          
      - name: Cache pre-commit
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
        id: precommitcache
          
      # The hooks will be installed automatically when pre-commit run is
      # called. But it's nice to do it separately for more visibility in the
      # GitHub interface into where a failure happens and how long each step
      # takes.
      - name: Install pre-commit hooks
        run: pre-commit install --install-hooks

      - name: Run all pre-commit checks on all files
        run: pre-commit run --color=always -a
        if: github.ref == 'refs/heads/main'
  test:
    if: github.event.pull_request.draft == false
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.10"]
    name: Test (${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:

      - uses: actions/checkout@v3
      
      - name: Install poetry
        run: pipx install poetry

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'poetry'

      - name: Update environment
        run: |
          poetry env use ${{ matrix.python-version }} && poetry install --with=test,cloud

      - name: Pytest
        run: poetry run pytest -n auto -s
  push_to_imprint:
    # if: github.ref == 'refs/heads/main'
    # needs: [test, lint]
    runs-on: ubuntu-latest
    name: Synchronize with imprint
    steps:
      # NOTE: This is technically unnecessary for running on the main branch.
      # But when debugging, it's nice to run in a PR, so I've left it here.
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_HEAD_REF#refs/heads/})"
        id: extract_branch

      - name: Install subrepo
        run: |
          git clone https://github.com/ingydotnet/git-subrepo ~/git-subrepo

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ steps.extract_branch.outputs.branch }}
          # Important!! We need to replace the default token in order to also
          # access the imprint github repo.
          token: ${{ secrets.SUBREPO_BOT_TOKEN }}

      - name: Push to imprint "sync" branch
        run: |
          source ~/git-subrepo/.rc
          git config --global user.email "research@confirmsol.org"
          git config --global user.name "SubrepoBot"
          git subrepo push imprint \
            --branch sync \
            --squash \
            --debug \
            --verbose \
            --force \
            --remote https://github.com/Confirm-Solutions/imprint.git

      - name: Create imprint PR
        env:
          GH_TOKEN: ${{ secrets.SUBREPO_BOT_TOKEN }}
        run: |
          gh pr --repo Confirm-Solutions/imprint close sync || true
          gh pr \
            --repo Confirm-Solutions/imprint \
            create \
            -B main \
            -H sync \
            -t "[BOT] Sync with upstream" \
            -b "Bot created PR to automatically to push changes to imprint."

      - name: Push results
        run: git push

      # TODO: this doesn't currently work because only the imprint repo has the SLACK_BOT_TOKEN
      # - name: Report failures on Slack
      #   if: failure() && github.event.repository.default_branch == github.event.workflow_run.head_branch
      #   id: slack
      #   uses: slackapi/slack-github-action@v1.19.0
      #   with:
      #     # Slack channel id, channel name, or user id to post message.
      #     # See also: https://api.slack.com/methods/chat.postMessage#channels
      #     channel-id: C02TC2DAN74
      #     # For posting a simple plain text message
      #     slack-message: "*Build failure on default branch!* ðŸ˜±\nhttps://github.com/${{github.repository}}/actions/runs/${{github.run_id}}"
      #   env:
      #     SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
